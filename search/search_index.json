{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>UTA027: Artificial Intelligence TIET Patiala</p>"},{"location":"#a01-predicate-calculus","title":"A01: Predicate Calculus","text":"<p>Instructors:</p> <ol> <li>Raghav B. Venkataramaiyer (<code>bv.raghav</code>)</li> <li>Stuti Chug (<code>stuti.chug</code>)</li> </ol>"},{"location":"#task","title":"Task","text":"<p>This exercise requires a student to translate situations (decision logic) described in natural english language to be translated to predicate calculus.  Here are a few examples.  There are a total of 75 instances for each student.  The submission is in the form of a git repository the commit access to which shall be rescinded after the deadline.</p>"},{"location":"#important-dates","title":"Important Dates","text":"S.No. Desc Timestamp 1. Submission Starts 07-01-2025 0800 IST 2. Submission Ends 20-01-2025 0500 IST"},{"location":"#getting-started","title":"Getting started","text":"<p>This assignment should already be available on your userspace as a git repository.  Navigate to the git repository in your userspace;</p> <ol> <li>Navigate to <code>generateAssignment.ipynb</code>, (in your userspace).</li> <li>Click \u201cOpen in Colab.\u201d </li> <li>Upon opening in Colab; the runtime should connect    all by itself and the files pane should be    populated. Click on folder/ files icon to view. </li> <li>Fill you <code>rollno</code> in the widget; and <code>Ctrl+F9</code> (or    else, via Menu \u00a0\u29fd\u00a0 Runtime \u00a0\u29fd\u00a0 Run all).  This    should result in a CSV file named    <code>a01-&lt;YOUR_ROLL_NO&gt;.csv</code> in the files    pane.  Click on three-dots to download it. </li> <li>Edit the csv with your favourite spreadsheet    editor (Google Sheets, MS Excel, LibreOffice, VIm,    Emacs or otherwise) to fill in your answers.</li> <li>Save or download the file as CSV, and commit back    into your repository.</li> <li>A submission may be updated multiple times before    the deadline.  So, one may save the progress online.    By default a student assignment is a private repo;    so unless exposed intentionally by the student, your    submission is secure.</li> </ol>"},{"location":"#some-tricks","title":"Some Tricks","text":"<p>In your lab session, your instructor may be able to guide to use save some time by:</p> <ol> <li>Getting started with the Github Classrooms;</li> <li>Save the file to google drive directly instead of    downloading;</li> <li>Editing within Github Codespace itself;</li> <li>Using automated string substitution(s), e.g. <code>FA X tomorrow?(X) AND rains?(X) IMPL    bring?(me,umbrella)</code>    instead of <code>\u2200 X tomorrow?(X) \u2227 rains?(X) \u2192 bring?(me,umbrella)</code>    and this translation is done automatically.</li> </ol>"},{"location":"#examples","title":"Examples","text":"<p>A situation description in natural language, may be expressed formally using predicate logic.  The following ten cases serve as exemplars.</p> Case 1Case 2Case 3Case 4Case 5Case 6Case 7Case 8Case 9Case 10 <p>If it rains tomorrow, I'll bring an umbrella.</p> <p><code>\u2200 X tomorrow?(X) \u2227 rains?(X) \u2192 bring?(me,umbrella)</code></p> <p>Here, <code>X</code> is a variable chosen for day, and we know that there are two predicates for the day, that define it; namely its <code>tomorrow?</code>, and it <code>rains?</code> on the day.  This forms our premise (or antecedent). The consequent is that I (represented by a constant <code>me</code> because <code>i</code> might be too generic) would bear an umbrella.</p> <p>If you heat water to 100\u00b0C, it boils.</p> <p><code>\u2200 T geq?(temp(water, T),100) \u2192 boils?(water,T)</code></p> <p>From our understanding of the world, heating of water is a process, which bears its signature as water temperature.  Hence the author chose a function <code>temp</code> to extract the substance property at time <code>T</code>.  Function Expression <code>temp(water,T)</code> represents that water temperature is being measured, probably periodically through some sensor.  <code>geq?</code> is a predicate defined for comparison, and returns \u201ctruthy\u201d if the first argument is greater than or equal to the second.  <code>boils?</code> is a (predicate) property that will be visible on water at time <code>T</code> as a consequence.</p> <p>If I had more time, I would learn to play piano.</p> <p><code>\u2200 X greater?(free_time(me),X) \u2192 learning_piano?(me)</code></p> <p>More time is a relative concept; hence the reference point here is taken as a variable <code>X</code>, to define the premise.  And the nomenclature <code>learning_piano?</code> for the predicate has been designed to reflect continuity.</p> <p>Please note here that in the formulation here the english grammatical tense makes no difference, e.g. \u201cIf I am having more time, I am learning piano\u201d might be poor, perhaps incorrect, english but that\u2019s the rough meaning of this well-formed expression (WFE) in predicate calculus (PC).</p> <p>If she arrives early, we can start the meeting sooner.</p> <p><code>\u2200 X less?(arr_time(she),X) \u2192 less?(start_time(meeting),X)</code></p> <p>Again here, understanding the world of discourse would help frame a (WFE-PC)</p> <p>Time is taken as variable and subtly embedded as \u201creturn value\u201d of a \u201cfunction\u201d.</p> <p>If you mix blue and yellow, you get green.</p> <p><code>\u2200 X blue?(X) \u2227 \u2200 Y yellow?(Y) \u2192 green?(mix(X,Y))</code></p> <p><code>X</code> and <code>Y</code> have been chosen as variable colours, because blue (or yellow or green) is not just one colour, they are a range of colours. eg. both sky and sea are blue, but not same.  And if you mix either of them with a yellow, you get a green.</p> <p>If I were you, I'd take that job offer.</p> <p><code>as_if?(me,you) \u2192 \u2200 X (job_offer?(X) \u2227 accept?(me,X))</code></p> <p>If the store is open, could you buy some milk?</p> <p><code>open?(store) \u2192 \u2200 X may_buy_from?(you,store,milk)</code></p> <p>The question like \u201ccould you\u2026?\u201d is implicit in all of PC, because the expression evaluates to true only if certain conditions are met.  So, in PC, this english sentence is equivalent to saying \u201cIf the store is open, by me some milk.\u201d</p> <p>If my dog hears a noise, he always barks.</p> <p><code>\u2200 X noise?(X) \u2227 \u2200 Y my_dog?(Y) \u2227 hears?(X,Y) \u2192 barks?(Y)</code> or, <code>\u2200 X noise?(X) \u2227 \u2200 Y dog?(Y) \u2227 pet?(me, Y) \u2227 hears?(X,Y) \u2192 barks?(Y)</code></p> <p>Please note the equivalence here: <code>my_dog?(Y) \u2261 dog?(Y) \u2227 pet?(me, Y)</code></p> <p>If we leave now, we'll catch the train.</p> <p><code>eq?(dep_time(us),now()) \u2192 catch?(us,train)</code> or, <code>\u2200T now?(T) \u2227 eq?(dep_time(us),T) \u2192 catch?(us,train)</code></p> <p><code>now()</code> has essentially been represented, more formally in the latter version, as a \u201cunary function\u201d because it\u2019s value changes depending upon the time of invocation.</p> <p>If you need help, just ask me.</p> <p><code>need?(you,help) \u2192 ask?(you,me,help)</code></p>"}]}